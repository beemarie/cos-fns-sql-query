# Wskdeploy manifest for openwhisk-cloudant-trigger
# GitHub repo is located at https://github.com/IBM/openwhisk-cloudant-trigger
# Installing openwhisk actions, triggers, and rules for OpenWhisk building block - Cloudant Trigger

# Deployment using this manifest file creates following OpenWhisk components:
#   Package:    cloud-object-storage
#   Package:    openwhisk-sql-query
#   Package:    $PACKAGE_NAME
#   Action:     $PACKAGE_NAME/parse_trigger.js
#   Action:     $PACKAGE_NAME/image_processing_vr.js
#   Action:     $PACKAGE_NAME/parse_params_sql_query
#   Action:     $PACKAGE_NAME/call_sql_job_results
#   Action:     $PACKAGE_NAME/find_and_write_similar_items
#   Sequence:   $PACKAGE_NAME/imagesequence
#   Sequence:   $PACKAGE_NAME/vrandwrite
#   Sequence:   $PACKAGE_NAME/sqlquerysequence
#   Trigger:    $TRIGGER_NAME_NEW (for the new images bucket)
#   Trigger:    $TRIGGER_NAME_PROCESSED (for the already processed images bucket)
#   Rule:       $RULE_NAME_NEW
#   Rule:       $RULE_NAME_PROCESSED

# This manifest file reads following env. variables:
#   PACKAGE_NAME
#   TRIGGER_NAME_NEW
#   RULE_NAME_NEW
#   TRIGGER_NAME_PROCESSED
#   RULE_NAME_PROCESSED
#   COS_SQL_TARGET
#   BUCKET_NAME
#   ENDPOINT (cos endpoint for your buckets)
#   VR_API_KEY (watson visual recognition)
#   VERSION (watson visual recognition version)

project:
  namespace: _
  packages:
    $PACKAGE_NAME:
      triggers:
          # Trigger
          # Creating trigger to fire events when data is inserted into COS
          $TRIGGER_NAME_NEW:
              feed: /whisk.system/cos/changes
              inputs:
                  bucket: $BUCKET_NAME
                  endpoint: $ENDPOINT
                  event_types: write
          # Trigger
          # Creating trigger to fire events when data is inserted into COS
          $TRIGGER_NAME_PROCESSED:
              feed: /whisk.system/cos/changes
              inputs:
                  bucket: $BUCKET_NAME-processed
                  endpoint: $ENDPOINT
                  event_types: write
      actions:
          parse_trigger:
            function: parse_trigger.js
            runtime: nodejs:10
          image_processing_vr:
            function: image_processing_vr.js
            runtime: nodejs:10
            inputs:
              apikey: $VR_API_KEY
              version: $VERSION
          parse_params_sql_query:
            function: parse_params_sql_query.js
            runtime: nodejs:10
            inputs:
              statement: "WITH explode_classes as (SELECT id, explode(classes) theclass FROM cos://us-south/my-images-bmv-processed STORED AS JSON) SELECT theclass.class, COUNT(id) as NumPicsWithClass FROM explode_classes GROUP BY theclass.class"
              resultset_target: $COS_SQL_TARGET
          call_sql_job_results:
            function: call_sql_job_results.js
            runtime: nodejs:10
      sequences:
        vrandwrite:
            actions: image_processing_vr, cloud-object-storage/object-write
        imagesequence:
            actions: parse_trigger, cloud-object-storage/client-get-signed-url, vrandwrite
        sqlquerysequence:
            actions: parse_params_sql_query, openwhisk-sql-query/sql-query, call_sql_job_results
      rules:
          # Rule
          # Creating rule that maps COS change trigger to sequence
          $RULE_NAME_NEW:
              trigger: $TRIGGER_NAME_NEW
              action: imagesequence
          $RULE_NAME_PROCESSED:
              trigger: $TRIGGER_NAME_PROCESSED
              action: sqlquerysequence